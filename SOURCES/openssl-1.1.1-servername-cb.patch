From 26bf0d5a1bdde811cae0c94e51abcb1927c0dbf6 Mon Sep 17 00:00:00 2001
From: David Morel <david.morel@vates.fr>
Date: Tue, 1 Aug 2023 17:55:37 +0200
Subject: [PATCH 39/43] [M] Patch79: openssl-1.1.1-servername-cb.patch

Patch went crazy in test/sslapitest.c, removed manually the block with
the same test and the ADD_TEST() of said function. Matches pretty well
the original patch, unsure about other OPENSSL_NO_TLS1_3 parts, so
keeping them for now.
---
 ssl/statem/statem_lib.c | 15 ++---------
 test/sslapitest.c       | 55 -----------------------------------------
 2 files changed, 2 insertions(+), 68 deletions(-)

diff --git a/ssl/statem/statem_lib.c b/ssl/statem/statem_lib.c
index 695caab3d6..a2fde9f356 100644
--- a/ssl/statem/statem_lib.c
+++ b/ssl/statem/statem_lib.c
@@ -1504,8 +1504,8 @@ static int ssl_method_error(const SSL *s, const SSL_METHOD *method)
 
 /*
  * Only called by servers. Returns 1 if the server has a TLSv1.3 capable
- * certificate type, or has PSK or a certificate callback configured, or has
- * a servername callback configured. Otherwise returns 0.
+ * certificate type, or has PSK or a certificate callback configured. Otherwise
+ * returns 0.
  */
 static int is_tls13_capable(const SSL *s)
 {
@@ -1515,17 +1515,6 @@ static int is_tls13_capable(const SSL *s)
     EC_KEY *eckey;
 #endif
 
-    if (!ossl_assert(s->ctx != NULL) || !ossl_assert(s->session_ctx != NULL))
-        return 0;
-
-    /*
-     * A servername callback can change the available certs, so if a servername
-     * cb is set then we just assume TLSv1.3 will be ok
-     */
-    if (s->ctx->ext.servername_cb != NULL
-            || s->session_ctx->ext.servername_cb != NULL)
-        return 1;
-
 #ifndef OPENSSL_NO_PSK
     if (s->psk_server_callback != NULL)
         return 1;
diff --git a/test/sslapitest.c b/test/sslapitest.c
index 5ee982ab06..32343d5e3b 100644
--- a/test/sslapitest.c
+++ b/test/sslapitest.c
@@ -6893,60 +6893,6 @@ static int test_ssl_dup(void)
 #endif
 
 #ifndef OPENSSL_NO_TLS1_3
-/*
- * Test that setting an SNI callback works with TLSv1.3. Specifically we check
- * that it works even without a certificate configured for the original
- * SSL_CTX
- */
-static int test_sni_tls13(void)
-{
-    SSL_CTX *cctx = NULL, *sctx = NULL, *sctx2 = NULL;
-    SSL *clientssl = NULL, *serverssl = NULL;
-    int testresult = 0;
-
-    /* Reset callback counter */
-    snicb = 0;
-
-    /* Create an initial SSL_CTX with no certificate configured */
-    sctx = SSL_CTX_new(TLS_server_method());
-    if (!TEST_ptr(sctx))
-        goto end;
-    /* Require TLSv1.3 as a minimum */
-    if (!TEST_true(create_ssl_ctx_pair(TLS_server_method(), TLS_client_method(),
-                                       TLS1_3_VERSION, 0, &sctx2, &cctx, cert,
-                                       privkey)))
-        goto end;
-
-    /* Set up SNI */
-    if (!TEST_true(SSL_CTX_set_tlsext_servername_callback(sctx, sni_cb))
-            || !TEST_true(SSL_CTX_set_tlsext_servername_arg(sctx, sctx2)))
-        goto end;
-
-    /*
-     * Connection should still succeed because the final SSL_CTX has the right
-     * certificates configured.
-     */
-    if (!TEST_true(create_ssl_objects(sctx, cctx, &serverssl,
-                                      &clientssl, NULL, NULL))
-            || !TEST_true(create_ssl_connection(serverssl, clientssl,
-                                                SSL_ERROR_NONE)))
-        goto end;
-
-    /* We should have had the SNI callback called exactly once */
-    if (!TEST_int_eq(snicb, 1))
-        goto end;
-
-    testresult = 1;
-
-end:
-    SSL_free(serverssl);
-    SSL_free(clientssl);
-    SSL_CTX_free(sctx2);
-    SSL_CTX_free(sctx);
-    SSL_CTX_free(cctx);
-    return testresult;
-}
-
 /*
  * Test that the lifetime hint of a TLSv1.3 ticket is no more than 1 week
  * 0 = TLSv1.2
@@ -7412,7 +7358,6 @@ int setup_tests(void)
     ADD_TEST(test_ssl_dup);
 #endif
 #ifndef OPENSSL_NO_TLS1_3
-    ADD_TEST(test_sni_tls13);
     ADD_ALL_TESTS(test_ticket_lifetime, 2);
 #endif
     ADD_TEST(test_set_alpn);
-- 
2.41.0

